CREATE DATABASE ORG;
SHOW DATABASE;
USE ORG;

CREATE TABLE WORKER (
WORKER_id INT NOT NULL PRIMARY KEY auto_increment,
FIRST_NAME CHAR(25),
LAST_NAME CHAR(25),
SALARY INT(15),
JOINING_DATE DATETIME,
DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
        
CREATE TABLE BONUS (
WORKER_REF_ID INT,
BONUS_AMOUNT INT(10),
BONUS_DATE DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES WORKER(WORKER_ID) ON DELETE CASCADE
);


INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');

CREATE TABLE TITLE (
WORKER_REF_ID INT,
WORKER_TITLE CHAR(25),
AFFECTED_FROM DATETIME,
FOREIGN KEY(WORKER_REF_ID)
REFERENCES WORKER(WORKER_ID)
ON DELETE CASCADE
);


INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2016-02-20 00:00:00'),
 (002, 'Executive', '2016-06-11 00:00:00'),
 (008, 'Executive', '2016-06-11 00:00:00'),
 (005, 'Manager', '2016-06-11 00:00:00'),
 (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 (007, 'Executive', '2016-06-11 00:00:00'),
 (006, 'Lead', '2016-06-11 00:00:00'),
 (003, 'Lead', '2016-06-11 00:00:00');
 
 /* WRITE A SQL QUERY TO FETCH FIRST_NAME FROM WORKER TABLE USING THE ALIAS NAME AS WORKER NAME*/
 SELECT FIRST_NAME AS WORKER_NAME FROM WORKER;
 
 # WRITE A SQL QUERY TO FETCH FIRST NAME FROM WORKER TABLE IN UPPER CASE
 SELECT UPPER(FIRST_NAME) FROM WORKER;
 
 # WRITE A SQL QUERY TO FETCH UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE
 SELECT DISTINCT(DEPARTMENT) FROM WORKER;
 
 # WRITE A SQL QUERY TO PRINT THE FIRST THREE CHARACTERS OF FIRST_NAME FROM WORKER TABLE
 SELECT substr(FIRST_NAME, 1,3) FROM WORKER;
 
 # WRITE AN SQL QUERY TO FIND THE POSITION OF THE ALPHABET ('A') IN THE FIRST NAME COLUMN 'AMITABH FROM WORKER TABLE
 SELECT INSTR(FIRST_NAME, BINARY'a') FROM WORKER WHERE FIRST_NAME = 'AMITABH';
 
 # WRITE A SQL QUERY TO PRINT THE FIRST_NAME FROM THE WORKER TABLE AFTER REMOVING WHITE SPACES FROM THE RIGHT SIDE
 SELECT RTRIM(FIRST_NAME) FROM WORKER;
 
 # WRITE A SQL QUERY TO PRINT THE DEPARTMENT FROM THE WORKER TABLE AFTER REMOVING THE WHITE SPACES FROM THE LEFT SIDE
 SELECT LTRIM(DEPARTMENT) FROM WORKER;
 
 # WRITE A SQL QUERY THAT FETCHES THE UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE AND PRINT ITS LENGTH
 SELECT  DISTINCT(LENGTH(DEPARTMENT)) FROM WORKER;	
 
 # WRITE A SQL QUERY TO PRINT THE FIRST_NAME FROM THE WORKER TABLE AFTER REPLACING 'a' WITH 'A'
 SELECT REPLACE(FIRST_NAME, 'a','A') FROM WORKER;
 
# WRITE A SQL QUERY TO PRINT THE FIRST NAME AND LAST NAME FROM WORKER TABLE INTO A SINGLE COLUMN COMPLETE_NAME A SPACE CHAR SHOULD SEPERATE THEM
SELECT concat(FIRST_NAME,' ', LAST_NAME) AS COMPLETE_NAME FROM WORKER;

# WRITE A SQL QUERY TO PRINT ALL WORKER DETAILS FROM THE WORKER TABLE ORDER BY FIRST_NAME ASCENDING
SELECT * FROM WORKER order by FIRST_NAME asc ;

# WRITE A SQL QUERY TO PRINT ALL WORKER DETAILS FROM THE WORKER TABLE ORDER BY FIRST_NAME ASCENDING AND DEPARTMENT DESCENDING
SELECT * FROM WORKER order by FIRST_NAME ASC ,DEPARTMENT DESC;

# WRITE A SQL QUERY TO PRINT DETAILS FOR WORKERS WITH THE FIRST NAME AS VIPUL AND SATISH FROM WORKER TABLE
SELECT * FROM WORKER WHERE FIRST_NAME IN ( "Vipul" , "Satish");

# WRITE A SQL QUERY TO PRINT DETAILS OF WORKERS EXCLUDING FIRST NAMES VIPUL AND SATISH FROM WORKER TABLE
SELECT * FROM WORKER WHERE FIRST_NAME NOT IN ('Vipul','Satish');

# WRITE A SQL QUERY TO PRINT DETAILS OF WORKERS WITH DEPARTMENT NAME AS 'Admin'
SELECT * FROM WORKER WHERE DEPARTMENT = 'Admin';
SELECT * FROM WORKER WHERE DEPARTMENT LIKE 'Admin%';

# WRITE A SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME CONTAINS 'A'
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%a%';

# WRITE A SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME ENDS WITH 'A'
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%a';

# WRITE A SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME ENDS WITH 'h' AND CONTAINS SIX ALPHABETS.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%h' AND INSTR(FIRST_NAME)=6;
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '_____H';

# WRITE A SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE SALARY LIES BETWEEN 100000 AND 500000
SELECT * FROM WORKER WHERE SALARY BETWEEN 100000 AND 500000;# BOTH VALUES INCLUSIVE

# WRITE A SQL QUERY TO PRINT DETAILS OF THE WORKERS WHO HAVE JOINED IN FEB 2014
SELECT * FROM WORKER WHERE YEAR(JOINING_DATE)= 2014 AND MONTH(JOINING_DATE) = 2;

# WRITE A SQL QUERY TO FETCH THE COUNT OF EMPLOYEES WORKING IN THE DEPARTMENT 'Admin'
SELECT COUNT(*) FROM WORKER WHERE DEPARTMENT = 'Admin';

# WRITE A QUERY TO FETCH WORKER NAMES WITH SALARIES >= 50000 AND <=100000
SELECT CONCAT(FIRST_NAME,' ', LAST_NAME) FROM WORKER WHERE SALARY>=50000 AND SALARY<= 100000;

# WRITE A SQL QUERY TO FETCH NO. OF WORKERS FOR THE EACH DEPARTMENT IN THE DESCENDING ORDER
SELECT DEPARTMENT,COUNT(WORKER_ID) FROM WORKER GROUP BY DEPARTMENT ORDER BY COUNT(DEPARTMENT) DESC;

# WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHO ARE ALSO MANAGERS
SELECT * FROM WORKER  W INNER JOIN TITLE T ON W.WORKER_ID=T.WORKER_REF_ID AND T.WORKER_TITLE IN ('Manager');

# WRITE AN SQL QUERY TO FETCH DUPLICATE RECORDS HAVING MATCHING DATA IN SOME FIELDS OF THE TABLE
SELECT WORKER_TITLE, AFFECTED_FROM, COUNT(*) FROM TITLE GROUP BY WORKER_TITLE, AFFECTED_FROM HAVING COUNT(*)>1;

# WRITE AN SQL QUERY TO SHOW ONLY THE ODD ROWS FROM  A TABLE
SET @ROW_NUMBER = 0;
SELECT * FROM WORKER;
#SELECT  * FROM (SELECT (@ROW_NUMBER:=@ROW_NUMBER+1) AS NUM, WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT FROM WORKER) WHERE  MOD(NUM,2)<>0;
SELECT * FROM WORKER WHERE MOD(WORKER_ID, 2)<>0;

# WRITE AN SQL QUERY TO SHOW ONLY THE EVEN ROWS FROM A TABLE
SELECT * FROM WORKER WHERE MOD(WORKER_ID, 2)=0;

# WRITE AN SQL QUERY TO CLONE A NEW TABLE FROM ANOTHER TABLE
#SELECT * INTO WORKERCLONE FROM WORKER;
#SELECT * INTO WORKERCLONE FROM WORKER WHERE 1=0;
DROP TABLE WORKERCLONE;
CREATE TABLE WORKERCLONE LIKE WORKER;
SELECT * FROM WORKERCLONE;
INSERT INTO WORKERCLONE SELECT * FROM WORKER;
SELECT * FROM WORKERCLONE;

# WRITE AN SQL QUERY TO FETCH INTERSECTING RECORDS OF TWO TABLES
#(SELECT * FROM WORKER) INTERSECT (SELECT * FROM WORKERCLONE);
SELECT * FROM WORKER INNER JOIN WORKERCLONE WHERE WORKER.WORKER_ID= WORKERCLONE.WORKER_ID;
SELECT DISTINCT WORKER_ID  FROM WORKER W INNER JOIN WORKERCLONE WC USING(WORKER_ID);
SELECT DISTINCT WORKER_ID FROM WORKER W WHERE W.WORKER_ID IN (SELECT WORKER_ID FROM WORKERCLONE);

# WRITE AN SQL QUERY TO SHOW RECORDS FROM ONE TABLE THAT ANOTHER DOES NOT HAVE
#SELECT * FROM WORKER MINUS SELECT * FROM TITLE;
#SELECT * FROM TITLE;
##SELECT * FROM WORKER;
#SELECT W.WORKER_ID, W.FIRST_NAME, W.LAST_NAME,W.SALARY, W.JOINING_DATE, W.DEPARTMENT  FROM WORKER W LEFT OUTER JOIN TITLE T ON W.WORKER_ID<> T.WORKER_REF_ID;
#SELECT DISTINCT(W.WORKER_ID, W.FIRST_NAME, W.LAST_NAME,W.SALARY, W.JOINING_DATE, W.DEPARTMENT)  FROM WORKER AS W  INNER JOIN TITLE AS T ON W.WORKER_ID <> T.WORKER_REF_ID;
#SELECT W.WORKER_ID, W.FIRST_NAME, W.LAST_NAME,W.SALARY, W.JOINING_DATE, W.DEPARTMENT  FROM WORKER AS W  WHERE NOT exists (SELECT * FROM  TITLE AS T ON T.WORKER_REF_ID != W.WORKER_ID);
SELECT * FROM WORKER WHERE WORKER_ID NOT IN (SELECT WORKER_REF_ID AS WORKER_ID FROM TITLE);

# WRITE AN SQL QUERY TO SHOW THE CURRENT DATE AND TIME
SELECT curdate();
SELECT NOW();
#SELECT GETDATE();
#SELECT SYSDATE FROM DUAL;

# WRITE AN SQL QUERY TO SHOW THE TOP N (SAY 10) RECORDS OF THE TABLE
#SELECT * , COUNT(*) FROM WORKER WHERE  COUNT(*)=10; 
SELECT * FROM WORKER ORDER BY WORKER_ID LIMIT 10;
SELECT * FROM WORKER ORDER BY SALARY DESC LIMIT 10;
#SELECT * FROM (SELECT * FROM WORKER ORDER BY SALARY DESC) WHERE ROWNUM<=10

# WRITE A SQL QUERY TO DETERMINE THE NTH (SAY N=5) HIGHEST SALARY FROM A TABLE
#SELECT last_value(*) FROM (SELECT * FROM WORKER ORDER BY SALARY DESC LIMIT 5);
SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 5;
SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 4,1;
#SELECT TOP 1 SALARY FROM (SELECT DISTINCT TOP N SALARY FROM WORKER ORDER BY SALARY DESC) ORDER BY SALARY ASC;

# WRITE AN SQL QUERT TO DETERMINE THE 5TH HIGHEST SALARY WITHOUT USING TOP OR LIMIT METHOD
SELECT SALARY FROM WORKER W1 WHERE 4 = ( SELECT COUNT(DISTINCT(W2.SALARY)) FROM WORKER W2 WHERE W2.SALARY>= W1.SALARY);

# WRITE AN SQL QUERY TO FETCH THE LIST OF EMPLOYEES WITH THE SAME SALARY
#SELECT W1.WORKER_ID , W1.FIRST_NAME FROM WORKER W1 WHERE W1.WORKER_ID != (SELECT W2.WORKER_ID FROM WORKER W2) AND W1.SALARY = (SELECT W2.SALARY FROM WORKER W2); 
#SELECT COUNT(DISTINCT(SALARY)) FROM WORKER;
SELECT W1.* FROM WORKER W1, WORKER W2 WHERE W1.SALARY = W2.SALARY AND W1.WORKER_ID!= W2.WORKER_ID;

# WRITE AN SQL QUERY TO SHOW THE SECOND HIGHEST SALARY FROM THE TABLE
SELECT W1.SALARY FROM WORKER  W1 WHERE 1 = (SELECT COUNT(DISTINCT(W2.SALARY)) FROM WORKER W2 WHERE W2.SALARY>= W1.SALARY);
SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 1,1; # PROBLEM IF THE HIGHEST SALARY IS REPEATING 
SELECT MAX(SALARY) FROM WORKER WHERE SALARY!=(SELECT MAX(SALARY) FROM WORKER);

# WRITE AN SQL QUERY TO SHOW ONE ROW TWICE IN THE RESULTS OF THE TABLE
SELECT W1.* FROM WORKER W1 WHERE W1.DEPARTMENT ='HR'
UNION ALL
SELECT W2.*  FROM WORKER W2 WHERE W2.DEPARTMENT ='HR';

# WRITE AN SQL QUERY TO FETCH INTERSECTING RECORDS OF THE TWO TABLES;
SELECT W1.* FROM WORKER W1 WHERE W1.WORKER_ID IN (SELECT W2.WORKER_ID FROM WORKERCLONE W2);

# WRITE AN SQL QUERY TO FETCH THE FIRST 50 % OF THE RECORDS FROM THE TABLE
SELECT * FROM WORKER WHERE WORKER_ID<=(SELECT COUNT(WORKER_ID)/2 FROM WORKER);

# WRITE AN SQL QUERY TO FETCH THE DEPARTMENTS THAT HAVE LESS THAN FIVE PEOPLE IN IT.
#SELECT DEPARTMENT, COUNT(DEPARTMENT) AS COUNT_DEPT FROM WORKER WHERE COUNT(DEPARTMENT)<=4 GROUP BY DEPARTMENT;
SELECT DEPARTMENT , COUNT(WORKER_ID) AS EMP_COUNT FROM WORKER GROUP BY DEPARTMENT   ORDER BY EMP_COUNT DESC;
SELECT DEPARTMENT , COUNT(WORKER_ID) AS EMP_COUNT FROM WORKER GROUP BY DEPARTMENT HAVING COUNT(WORKER_ID)<5;

# WRITE AN SQL QUERY TO SHOW ALL DEPARTMENTS ALONG WITH THE NUMBER OF PEOPLE IN THERE
SELECT DEPARTMENT , COUNT(WORKER_ID) FROM WORKER GROUP BY DEPARTMENT;

# WRITE AN SQL QUERY TO SHOW THE LAST RECORD FROM A TABLE
SELECT * FROM WORKER WHERE WORKER_ID = (SELECT MAX(WORKER_ID) FROM WORKER);
SELECT * FROM WORKER ORDER BY WORKER_ID DESC LIMIT 1;
SELECT COUNT(*) -1 AS ROWCOUNT FROM WORKER;
SELECT * FROM WORKER LIMIT 7,1;

# WRITE AN QUERY TO FETCH 1ST ROW OF THE TABLE
SELECT * FROM WORKER WHERE WORKER_ID= (SELECT MIN(WORKER_ID) FROM WORKER);
SELECT * FROM WORKER LIMIT 1;

# WRITE AN SQL QUERY TO FETCH THE LAST FIVE RECORDS FROM THE TABLE
SELECT COUNT(*)-1 AS ROWCOUNT FROM WORKER;
SELECT * FROM WORKER LIMIT 2,5;
SELECT * FROM WORKER  WHERE WORKER_ID<=5 
UNION 
SELECT * FROM (SELECT * FROM WORKER W ORDER BY W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID<=5;

# WRITE AN SQL QUERY TO PRINT THE NAME OF THE EMPLOYEES HAVING HIGHEST SALARY IN EACH DEPARTMENT
#SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) FROM WORKER GROUP BY DEPARTMENT HAVING SALARY = MAX(SALARY);
#SELECT * FROM WORKER;
SELECT T.DEPARTMENT, T.FIRST_NAME, T.SALARY FROM (SELECT MAX(SALARY) AS TOTALSALARY, DEPARTMENT FROM WORKER GROUP BY DEPARTMENT) AS TEMPNEW
INNER JOIN WORKER T ON TEMPNEW.DEPARTMENT = T.DEPARTMENT AND TEMPNEW.TOTALSALARY =T.SALARY;
#SELECT DEPARTMENT, FIRST_NAME, SALARY FROM WORKER GROUP BY DEPARTMENT HAVING SALARY = MAX(SALARY);
#SELECT TOP(1) FIRST_NAME, DEPARTMENT, SUM(SALARY) AS SAL FROM WORKER GROUP BY FIRST_NAME, DEPARTMENT ORDER BY SAL DESC;
# SOLUTION 2
;WITH EmployeeDetails AS (
SELECT FIRST_NAME, Department, DENSE_RANK() OVER(PARTITION BY Department ORDER BY Salary DESC) AS SalaryRank, Salary
FROM WORKER 
)
SELECT FIRST_Name, Department, Salary FROM EmployeeDetails WHERE SalaryRank=1;

# WRITE AN SQL QUERY TO FETCH THREE MAX SALARIES FROM A TABLE
SELECT FIRST_NAME, SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 3;
SELECT DISTINCT SALARY FROM WORKER A WHERE 3>= (SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY<=B.SALARY) ORDER BY A.SALARY DESC;

# WRITE AN SQL QUERY TO FETCH THREE MIN SALARIES FROM A TABLE
SELECT DISTINCT SALARY FROM WORKER A WHERE 3>= (SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY>=B.SALARY) ORDER BY A.SALARY ASC;
SELECT SALARY FROM WORKER ORDER BY SALARY ASC LIMIT 3;

# WRITE AN SQL QUERY TO FETCH NTH MAX SALARIES FROM A TABLE
SELECT DISTINCT SALARY FROM WORKER A WHERE n>=(SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY>=B.SALARY) ORDER BY A.SALARY DESC;
SELECT COUNT(DISTINCT SALARY) FROM WORKER;

# WRITE AN SQL QUERY TO FETCH DEPARTMENTS ALONG WITH THE TOTAL SALARIES PAID FOR EACH OF THEM
SELECT DEPARTMENT, SUM(SALARY) DEPT_SALARY FROM WORKER GROUP BY DEPARTMENT;

# WRITE AN SQL QUERY TO FETCH THE NAMES OF WORKERS WHO EARN THE HIGHEST SALARY
SELECT CONCAT(FIRST_NAME,' ', LAST_NAME) EMP_NAME FROM WORKER WHERE SALARY = (SELECT MAX(SALARY) FROM WORKER);